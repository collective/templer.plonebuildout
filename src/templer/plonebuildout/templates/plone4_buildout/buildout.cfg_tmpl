# buildout.cfg file for Plone 4 development work
# - for production installations please use http://plone.org/download
#
# Each part has more information about its recipe on PyPi
# http://pypi.python.org/pypi 
# ... just reach by the recipe name
[buildout]
parts =  
    instance
    zopepy
    i18ndude
    paster
    zopeskel
    test
\#    omelette

extends = 
    http://dist.plone.org/release/${plone_version}/versions.cfg
	
\# Add additional egg download sources here. dist.plone.org contains archives
\# of Plone packages.
find-links =
    http://dist.plone.org/release/${plone_version}
    http://dist.plone.org/thirdparty

extensions = 
    mr.developer
    buildout.dumppickedversions

sources = sources
	
versions = versions

\# Reference any folders where you have Python egg source code under development here 
\# e.g.: develop = src/my.package
\# If you are using the mr.developer extension and have the source code in a 
\# repository mr.developer will handle this automatically for you
develop =


\# Create bin/instance command to manage Zope start up and shutdown
[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
debug-mode = off
verbose-security = on
blob-storage = var/blobstorage

eggs =
	Plone

\# Some pre-Plone 3.3 packages may need you to register the package name here in 
\# order their configure.zcml to be run (http://plone.org/products/plone/roadmap/247)
\# - this is never required for packages in the Products namespace (Products.*)
zcml =


\# zopepy commands allows you to execute Python scripts using a PYTHONPATH 
\# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = \${instance:eggs}
interpreter = zopepy
scripts = zopepy

\# create bin/i18ndude command
[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

\# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    \${instance:eggs}

\# create paster command with Dexterity support
[paster]
recipe = zc.recipe.egg
eggs =
   ZopeSkel
   PasteScript
   PasteDeploy
   zopeskel.dexterity
   \${instance:eggs}
entry-points = paster=paste.script.command:run


\# create ZopeSkel command
[zopeskel]
unzip = true
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    \${instance:eggs}

\# symlinks all Python source code to parts/omelette folder when buildout is run
\# windows users will need to install additional software for this part to build 
\# correctly.  See http://pypi.python.org/pypi/collective.recipe.omelette for
\# relevant details.
\# [omelette]
\# recipe = collective.recipe.omelette
\# eggs = \${instance:eggs}

\# Put your mr.developer managed source code repositories here, see
\# http://pypi.python.org/pypi/mr.developer for details on format for this part
[sources]
collective.developermanual = svn http://svn.plone.org/svn/collective/collective.developermanual

\# Version pindowns for new style products go here - this section extends one provided in http://dist.plone.org/release/
[versions]
